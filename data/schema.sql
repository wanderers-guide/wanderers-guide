--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.10 (Ubuntu 15.10-1.pgdg24.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: ability_block; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ability_block (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    operations json[],
    name character varying DEFAULT ''::character varying NOT NULL,
    actions character varying,
    level integer,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    prerequisites character varying[],
    frequency character varying,
    cost character varying,
    trigger character varying,
    requirements character varying,
    access character varying,
    description character varying,
    special character varying,
    type character varying NOT NULL,
    meta_data json,
    traits bigint[],
    content_source_id bigint NOT NULL,
    version character varying,
    uuid bigint NOT NULL,
    availability character varying
);


ALTER TABLE public.ability_block OWNER TO postgres;

--
-- Name: ability_block_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.ability_block ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.ability_block_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ancestry; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ancestry (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    trait_id bigint NOT NULL,
    artwork_url character varying,
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    operations json[],
    uuid bigint NOT NULL,
    deprecated boolean
);


ALTER TABLE public.ancestry OWNER TO postgres;

--
-- Name: ancestry_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.ancestry ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.ancestry_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: archetype; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.archetype (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying NOT NULL,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    description text NOT NULL,
    trait_id bigint NOT NULL,
    artwork_url character varying,
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    dedication_feat_id bigint,
    uuid bigint,
    deprecated boolean
);


ALTER TABLE public.archetype OWNER TO postgres;

--
-- Name: archetype_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.archetype ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.archetype_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: background; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.background (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    operations json[],
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    uuid bigint NOT NULL,
    artwork_url character varying,
    deprecated boolean
);


ALTER TABLE public.background OWNER TO postgres;

--
-- Name: background_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.background ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.background_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: campaign; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.campaign (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid NOT NULL,
    name character varying DEFAULT '''New Campaign'''::character varying NOT NULL,
    description character varying,
    notes json,
    recommended_options json,
    recommended_variants json,
    recommended_content_sources json,
    custom_operations json[],
    meta_data json,
    join_key character varying DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE public.campaign OWNER TO postgres;

--
-- Name: campaign_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.campaign ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.campaign_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: character; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."character" (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid NOT NULL,
    name character varying DEFAULT 'Unknown Wanderer'::character varying NOT NULL,
    level integer DEFAULT 1 NOT NULL,
    experience integer DEFAULT 0 NOT NULL,
    hp_current integer DEFAULT 1 NOT NULL,
    hp_temp integer DEFAULT 0 NOT NULL,
    hero_points integer DEFAULT 1 NOT NULL,
    stamina_current integer DEFAULT 0 NOT NULL,
    resolve_current integer DEFAULT 0 NOT NULL,
    inventory json DEFAULT '{ "coins": {"cp": 0, "sp": 150, "gp": 0, "pp": 0 }, "items": [] }'::json,
    notes json,
    details json,
    roll_history json,
    custom_operations json[],
    meta_data json,
    options jsonb DEFAULT '{"dice_roller": true, "auto_detect_prerequisites": true}'::jsonb,
    variants json,
    content_sources json DEFAULT '{"enabled":[1,8,7]}'::json,
    operation_data json,
    spells json,
    companions json,
    campaign_id bigint
);


ALTER TABLE public."character" OWNER TO postgres;

--
-- Name: character_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public."character" ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.character_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: class; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.class (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying NOT NULL,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    operations json[],
    trait_id bigint NOT NULL,
    artwork_url character varying,
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    uuid bigint NOT NULL,
    skill_training_base integer DEFAULT 3 NOT NULL,
    deprecated boolean
);


ALTER TABLE public.class OWNER TO postgres;

--
-- Name: class_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.class ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.class_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: content_source; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.content_source (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    foundry_id character varying,
    url character varying,
    description text DEFAULT ''::text NOT NULL,
    operations json[],
    user_id uuid,
    contact_info character varying,
    require_key boolean DEFAULT false NOT NULL,
    is_published boolean DEFAULT false NOT NULL,
    required_content_sources bigint[],
    "group" character varying,
    meta_data json,
    artwork_url character varying,
    keys jsonb,
    deprecated boolean
);


ALTER TABLE public.content_source OWNER TO postgres;

--
-- Name: content_source_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.content_source ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.content_source_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: content_update; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.content_update (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid NOT NULL,
    type character varying NOT NULL,
    ref_id bigint,
    content_source_id bigint NOT NULL,
    action character varying NOT NULL,
    data json NOT NULL,
    discord_msg_id character varying,
    upvotes json[] NOT NULL,
    downvotes json[] NOT NULL,
    status json NOT NULL
);


ALTER TABLE public.content_update OWNER TO postgres;

--
-- Name: content_update_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.content_update ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.content_update_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: creature; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.creature (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying NOT NULL,
    level integer DEFAULT 0 NOT NULL,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    meta_data json,
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    uuid bigint NOT NULL,
    inventory json,
    notes json,
    details json NOT NULL,
    roll_history json,
    operations json[],
    abilities_base json[],
    spells json,
    deprecated boolean,
    abilities_added bigint[]
);


ALTER TABLE public.creature OWNER TO postgres;

--
-- Name: creature_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.creature ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.creature_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: encounter; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.encounter (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying NOT NULL,
    user_id uuid NOT NULL,
    campaign_id bigint,
    combatants json NOT NULL,
    meta_data json NOT NULL,
    color character varying NOT NULL,
    icon character varying NOT NULL
);


ALTER TABLE public.encounter OWNER TO postgres;

--
-- Name: encounter_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.encounter ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.encounter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: item; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.item (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    bulk character varying,
    level integer DEFAULT 0 NOT NULL,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    "group" character varying DEFAULT 'GENERAL'::character varying NOT NULL,
    hands character varying,
    size character varying DEFAULT 'MEDIUM'::character varying NOT NULL,
    craft_requirements character varying,
    usage character varying,
    meta_data json,
    operations json[],
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    uuid bigint NOT NULL,
    price json,
    traits bigint[],
    availability character varying
);


ALTER TABLE public.item OWNER TO postgres;

--
-- Name: item_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.item ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.item_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: language; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.language (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    speakers character varying,
    script character varying,
    description text,
    content_source_id bigint,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    uuid bigint NOT NULL,
    availability character varying,
    deprecated boolean
);


ALTER TABLE public.language OWNER TO postgres;

--
-- Name: language_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.language ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.language_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: public_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.public_user (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid NOT NULL,
    display_name character varying DEFAULT 'Unknown User'::character varying,
    image_url character varying,
    background_image_url character varying,
    site_theme json,
    is_admin boolean DEFAULT false NOT NULL,
    is_mod boolean DEFAULT false NOT NULL,
    deactivated boolean DEFAULT false NOT NULL,
    summary text,
    subscribed_content_sources jsonb,
    patreon jsonb,
    organized_play_id character varying,
    is_developer boolean,
    is_community_paragon boolean
);


ALTER TABLE public.public_user OWNER TO postgres;

--
-- Name: public_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.public_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.public_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: spell; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.spell (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    traditions character varying[],
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    "cast" character varying,
    traits bigint[],
    defense character varying,
    cost character varying,
    trigger character varying,
    requirements character varying,
    range character varying,
    area character varying,
    targets character varying,
    duration character varying,
    description text,
    meta_data jsonb,
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    uuid bigint NOT NULL,
    heightened json,
    availability character varying
);


ALTER TABLE public.spell OWNER TO postgres;

--
-- Name: spell_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.spell ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.spell_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: trait; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.trait (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying DEFAULT ''::character varying NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    meta_data jsonb,
    content_source_id bigint NOT NULL,
    uuid bigint NOT NULL
);


ALTER TABLE public.trait OWNER TO postgres;

--
-- Name: trait_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.trait ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.trait_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: versatile_heritage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.versatile_heritage (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name character varying NOT NULL,
    rarity character varying DEFAULT 'COMMON'::character varying NOT NULL,
    description text NOT NULL,
    trait_id bigint NOT NULL,
    artwork_url character varying,
    content_source_id bigint NOT NULL,
    version character varying DEFAULT '1.0'::character varying NOT NULL,
    heritage_id bigint NOT NULL,
    uuid bigint,
    deprecated boolean
);


ALTER TABLE public.versatile_heritage OWNER TO postgres;

--
-- Name: versatile_heritage_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.versatile_heritage ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.versatile_heritage_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ability_block ability_block_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ability_block
    ADD CONSTRAINT ability_block_pkey PRIMARY KEY (id);


--
-- Name: ability_block ability_block_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ability_block
    ADD CONSTRAINT ability_block_uuid_key UNIQUE (uuid);


--
-- Name: ancestry ancestry_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ancestry
    ADD CONSTRAINT ancestry_pkey PRIMARY KEY (id);


--
-- Name: ancestry ancestry_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ancestry
    ADD CONSTRAINT ancestry_uuid_key UNIQUE (uuid);


--
-- Name: archetype archetype_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.archetype
    ADD CONSTRAINT archetype_pkey PRIMARY KEY (id);


--
-- Name: archetype archetype_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.archetype
    ADD CONSTRAINT archetype_uuid_key UNIQUE (uuid);


--
-- Name: background background_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.background
    ADD CONSTRAINT background_pkey PRIMARY KEY (id);


--
-- Name: background background_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.background
    ADD CONSTRAINT background_uuid_key UNIQUE (uuid);


--
-- Name: campaign campaign_join_key_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.campaign
    ADD CONSTRAINT campaign_join_key_key UNIQUE (join_key);


--
-- Name: campaign campaign_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.campaign
    ADD CONSTRAINT campaign_pkey PRIMARY KEY (id);


--
-- Name: character character_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."character"
    ADD CONSTRAINT character_pkey PRIMARY KEY (id);


--
-- Name: class class_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.class
    ADD CONSTRAINT class_pkey PRIMARY KEY (id);


--
-- Name: class class_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.class
    ADD CONSTRAINT class_uuid_key UNIQUE (uuid);


--
-- Name: content_source content_source_foundry_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_source
    ADD CONSTRAINT content_source_foundry_id_key UNIQUE (foundry_id);


--
-- Name: content_source content_source_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_source
    ADD CONSTRAINT content_source_pkey PRIMARY KEY (id);


--
-- Name: content_update content_update_discord_msg_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_update
    ADD CONSTRAINT content_update_discord_msg_id_key UNIQUE (discord_msg_id);


--
-- Name: content_update content_update_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_update
    ADD CONSTRAINT content_update_pkey PRIMARY KEY (id);


--
-- Name: creature creature_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.creature
    ADD CONSTRAINT creature_pkey PRIMARY KEY (id);


--
-- Name: creature creature_upload_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.creature
    ADD CONSTRAINT creature_upload_uuid_key UNIQUE (uuid);


--
-- Name: encounter encounter_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.encounter
    ADD CONSTRAINT encounter_pkey PRIMARY KEY (id);


--
-- Name: item item_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.item
    ADD CONSTRAINT item_pkey PRIMARY KEY (id);


--
-- Name: item item_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.item
    ADD CONSTRAINT item_uuid_key UNIQUE (uuid);


--
-- Name: language language_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.language
    ADD CONSTRAINT language_pkey PRIMARY KEY (id);


--
-- Name: language language_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.language
    ADD CONSTRAINT language_uuid_key UNIQUE (uuid);


--
-- Name: public_user public_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.public_user
    ADD CONSTRAINT public_user_pkey PRIMARY KEY (id);


--
-- Name: spell spell_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.spell
    ADD CONSTRAINT spell_pkey PRIMARY KEY (id);


--
-- Name: spell spell_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.spell
    ADD CONSTRAINT spell_uuid_key UNIQUE (uuid);


--
-- Name: trait trait_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.trait
    ADD CONSTRAINT trait_pkey PRIMARY KEY (id);


--
-- Name: trait trait_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.trait
    ADD CONSTRAINT trait_uuid_key UNIQUE (uuid);


--
-- Name: versatile_heritage versatile_heritage_heritage_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.versatile_heritage
    ADD CONSTRAINT versatile_heritage_heritage_id_key UNIQUE (heritage_id);


--
-- Name: versatile_heritage versatile_heritage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.versatile_heritage
    ADD CONSTRAINT versatile_heritage_pkey PRIMARY KEY (id);


--
-- Name: versatile_heritage versatile_heritage_uuid_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.versatile_heritage
    ADD CONSTRAINT versatile_heritage_uuid_key UNIQUE (uuid);


--
-- Name: ability_block_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ability_block_content_source_id_idx ON public.ability_block USING btree (content_source_id);


--
-- Name: ancestry_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ancestry_content_source_id_idx ON public.ancestry USING btree (content_source_id);


--
-- Name: ancestry_trait_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ancestry_trait_id_idx ON public.ancestry USING btree (trait_id);


--
-- Name: archetype_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX archetype_content_source_id_idx ON public.archetype USING btree (content_source_id);


--
-- Name: archetype_trait_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX archetype_trait_id_idx ON public.archetype USING btree (trait_id);


--
-- Name: background_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX background_content_source_id_idx ON public.background USING btree (content_source_id);


--
-- Name: campaign_join_key_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX campaign_join_key_idx ON public.campaign USING btree (join_key);


--
-- Name: campaign_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX campaign_user_id_idx ON public.campaign USING btree (user_id);


--
-- Name: character_campaign_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX character_campaign_id_idx ON public."character" USING btree (campaign_id);


--
-- Name: character_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX character_user_id_idx ON public."character" USING btree (user_id);


--
-- Name: class_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX class_content_source_id_idx ON public.class USING btree (content_source_id);


--
-- Name: class_trait_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX class_trait_id_idx ON public.class USING btree (trait_id);


--
-- Name: content_source_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX content_source_user_id_idx ON public.content_source USING btree (user_id);


--
-- Name: content_update_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX content_update_content_source_id_idx ON public.content_update USING btree (content_source_id);


--
-- Name: content_update_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX content_update_user_id_idx ON public.content_update USING btree (user_id);


--
-- Name: creature_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX creature_content_source_id_idx ON public.creature USING btree (content_source_id);


--
-- Name: encounter_campaign_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX encounter_campaign_id_idx ON public.encounter USING btree (campaign_id);


--
-- Name: encounter_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX encounter_user_id_idx ON public.encounter USING btree (user_id);


--
-- Name: item_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX item_content_source_id_idx ON public.item USING btree (content_source_id);


--
-- Name: language_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX language_content_source_id_idx ON public.language USING btree (content_source_id);


--
-- Name: public_user_user_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX public_user_user_id_idx ON public.public_user USING btree (user_id);


--
-- Name: spell_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX spell_content_source_id_idx ON public.spell USING btree (content_source_id);


--
-- Name: trait_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX trait_content_source_id_idx ON public.trait USING btree (content_source_id);


--
-- Name: versatile_heritage_content_source_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX versatile_heritage_content_source_id_idx ON public.versatile_heritage USING btree (content_source_id);


--
-- Name: versatile_heritage_trait_id_idx; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX versatile_heritage_trait_id_idx ON public.versatile_heritage USING btree (trait_id);


--
-- Name: ability_block ability_block_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ability_block
    ADD CONSTRAINT ability_block_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ancestry ancestry_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ancestry
    ADD CONSTRAINT ancestry_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: ancestry ancestry_trait_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ancestry
    ADD CONSTRAINT ancestry_trait_id_fkey FOREIGN KEY (trait_id) REFERENCES public.trait(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: background background_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.background
    ADD CONSTRAINT background_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: character character_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."character"
    ADD CONSTRAINT character_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: class class_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.class
    ADD CONSTRAINT class_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: class class_trait_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.class
    ADD CONSTRAINT class_trait_id_fkey FOREIGN KEY (trait_id) REFERENCES public.trait(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: content_source content_source_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_source
    ADD CONSTRAINT content_source_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: creature creature_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.creature
    ADD CONSTRAINT creature_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: item item_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.item
    ADD CONSTRAINT item_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: language language_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.language
    ADD CONSTRAINT language_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: archetype public_archetype_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.archetype
    ADD CONSTRAINT public_archetype_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: archetype public_archetype_dedication_feat_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.archetype
    ADD CONSTRAINT public_archetype_dedication_feat_id_fkey FOREIGN KEY (dedication_feat_id) REFERENCES public.ability_block(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: archetype public_archetype_trait_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.archetype
    ADD CONSTRAINT public_archetype_trait_id_fkey FOREIGN KEY (trait_id) REFERENCES public.trait(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: campaign public_campaign_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.campaign
    ADD CONSTRAINT public_campaign_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: character public_character_campaign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."character"
    ADD CONSTRAINT public_character_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES public.campaign(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: content_update public_content_update_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_update
    ADD CONSTRAINT public_content_update_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: content_update public_content_update_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.content_update
    ADD CONSTRAINT public_content_update_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: encounter public_encounter_campaign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.encounter
    ADD CONSTRAINT public_encounter_campaign_id_fkey FOREIGN KEY (campaign_id) REFERENCES public.campaign(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: encounter public_encounter_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.encounter
    ADD CONSTRAINT public_encounter_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: public_user public_public_user_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.public_user
    ADD CONSTRAINT public_public_user_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: versatile_heritage public_versatile_heritage_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.versatile_heritage
    ADD CONSTRAINT public_versatile_heritage_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: versatile_heritage public_versatile_heritage_heritage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.versatile_heritage
    ADD CONSTRAINT public_versatile_heritage_heritage_id_fkey FOREIGN KEY (heritage_id) REFERENCES public.ability_block(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: versatile_heritage public_versatile_heritage_trait_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.versatile_heritage
    ADD CONSTRAINT public_versatile_heritage_trait_id_fkey FOREIGN KEY (trait_id) REFERENCES public.trait(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: spell spell_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.spell
    ADD CONSTRAINT spell_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: trait trait_content_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.trait
    ADD CONSTRAINT trait_content_source_id_fkey FOREIGN KEY (content_source_id) REFERENCES public.content_source(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: character Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable delete for users based on user_id" ON public."character" FOR DELETE TO authenticated USING ((auth.uid() = user_id));


--
-- Name: character Enable insert for authenticated users only; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert for authenticated users only" ON public."character" FOR INSERT TO authenticated WITH CHECK (true);


--
-- Name: ability_block Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.ability_block TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = ability_block.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = ability_block.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: ancestry Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.ancestry TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = ancestry.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = ancestry.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: archetype Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.archetype TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = archetype.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = archetype.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: background Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.background TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = background.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = background.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: class Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.class TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = class.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = class.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: creature Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.creature TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = creature.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = creature.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: item Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.item TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = item.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = item.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: language Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.language TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = language.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = language.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: spell Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.spell TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = spell.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = spell.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: trait Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.trait TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = trait.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = trait.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: versatile_heritage Enable insert, update, and delete for admins or homebrew owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or homebrew owners" ON public.versatile_heritage TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = versatile_heritage.content_source_id) AND (content_source.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (EXISTS ( SELECT 1
   FROM public.content_source
  WHERE ((content_source.id = versatile_heritage.content_source_id) AND (content_source.user_id = auth.uid()))))));


--
-- Name: content_source Enable insert, update, and delete for admins or owners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for admins or owners" ON public.content_source TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (user_id = auth.uid()))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (user_id = auth.uid())));


--
-- Name: content_update Enable insert, update, and delete for authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for authenticated users" ON public.content_update TO authenticated USING (true) WITH CHECK (true);


--
-- Name: campaign Enable insert, update, and delete for owners only; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert, update, and delete for owners only" ON public.campaign TO authenticated USING ((user_id = auth.uid())) WITH CHECK ((user_id = auth.uid()));


--
-- Name: campaign Enable read access for all authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all authenticated users" ON public.campaign FOR SELECT TO authenticated USING (true);


--
-- Name: ability_block Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.ability_block FOR SELECT USING (true);


--
-- Name: ancestry Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.ancestry FOR SELECT USING (true);


--
-- Name: archetype Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.archetype FOR SELECT USING (true);


--
-- Name: background Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.background FOR SELECT USING (true);


--
-- Name: class Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.class FOR SELECT USING (true);


--
-- Name: content_source Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.content_source FOR SELECT USING (true);


--
-- Name: content_update Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.content_update FOR SELECT USING (true);


--
-- Name: creature Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.creature FOR SELECT USING (true);


--
-- Name: item Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.item FOR SELECT USING (true);


--
-- Name: language Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.language FOR SELECT USING (true);


--
-- Name: spell Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.spell FOR SELECT USING (true);


--
-- Name: trait Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.trait FOR SELECT USING (true);


--
-- Name: versatile_heritage Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.versatile_heritage FOR SELECT USING (true);


--
-- Name: character Enable select if admin, public, owned by self, or in campaign; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable select if admin, public, owned by self, or in campaign" ON public."character" FOR SELECT USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR ((options -> 'is_public'::text) = 'true'::jsonb) OR (auth.uid() = user_id) OR (EXISTS ( SELECT 1
   FROM public.campaign
  WHERE ((campaign.id = "character".campaign_id) AND (campaign.user_id = auth.uid()))))));


--
-- Name: encounter Enable select, insert, update, and delete for owners only; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable select, insert, update, and delete for owners only" ON public.encounter TO authenticated USING ((user_id = auth.uid()));


--
-- Name: character Enable update if admin, owned by self, or in campaign; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable update if admin, owned by self, or in campaign" ON public."character" FOR UPDATE TO authenticated USING (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (auth.uid() = user_id) OR (EXISTS ( SELECT 1
   FROM public.campaign
  WHERE ((campaign.id = "character".campaign_id) AND (campaign.user_id = auth.uid())))))) WITH CHECK (((EXISTS ( SELECT 1
   FROM public.public_user
  WHERE ((public_user.user_id = auth.uid()) AND public_user.is_admin))) OR (auth.uid() = user_id) OR (EXISTS ( SELECT 1
   FROM public.campaign
  WHERE ((campaign.id = "character".campaign_id) AND (campaign.user_id = auth.uid()))))));


--
-- Name: public_user Public users are viewable by everyone.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public users are viewable by everyone." ON public.public_user FOR SELECT USING (true);


--
-- Name: public_user Users can insert their own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own profile." ON public.public_user FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));


--
-- Name: public_user Users can update own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update own profile." ON public.public_user FOR UPDATE TO authenticated USING ((auth.uid() = user_id));


--
-- Name: ability_block; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.ability_block ENABLE ROW LEVEL SECURITY;

--
-- Name: ancestry; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.ancestry ENABLE ROW LEVEL SECURITY;

--
-- Name: archetype; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.archetype ENABLE ROW LEVEL SECURITY;

--
-- Name: background; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.background ENABLE ROW LEVEL SECURITY;

--
-- Name: campaign; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.campaign ENABLE ROW LEVEL SECURITY;

--
-- Name: character; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public."character" ENABLE ROW LEVEL SECURITY;

--
-- Name: class; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.class ENABLE ROW LEVEL SECURITY;

--
-- Name: content_source; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.content_source ENABLE ROW LEVEL SECURITY;

--
-- Name: content_update; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.content_update ENABLE ROW LEVEL SECURITY;

--
-- Name: creature; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.creature ENABLE ROW LEVEL SECURITY;

--
-- Name: encounter; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.encounter ENABLE ROW LEVEL SECURITY;

--
-- Name: item; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.item ENABLE ROW LEVEL SECURITY;

--
-- Name: language; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.language ENABLE ROW LEVEL SECURITY;

--
-- Name: public_user; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.public_user ENABLE ROW LEVEL SECURITY;

--
-- Name: spell; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.spell ENABLE ROW LEVEL SECURITY;

--
-- Name: trait; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.trait ENABLE ROW LEVEL SECURITY;

--
-- Name: versatile_heritage; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.versatile_heritage ENABLE ROW LEVEL SECURITY;

--
-- Name: TABLE ability_block; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.ability_block TO anon;
GRANT ALL ON TABLE public.ability_block TO authenticated;
GRANT ALL ON TABLE public.ability_block TO service_role;
GRANT ALL ON TABLE public.ability_block TO github;


--
-- Name: SEQUENCE ability_block_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.ability_block_id_seq TO anon;
GRANT ALL ON SEQUENCE public.ability_block_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.ability_block_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.ability_block_id_seq TO github;


--
-- Name: TABLE ancestry; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.ancestry TO anon;
GRANT ALL ON TABLE public.ancestry TO authenticated;
GRANT ALL ON TABLE public.ancestry TO service_role;
GRANT ALL ON TABLE public.ancestry TO github;


--
-- Name: SEQUENCE ancestry_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.ancestry_id_seq TO anon;
GRANT ALL ON SEQUENCE public.ancestry_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.ancestry_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.ancestry_id_seq TO github;


--
-- Name: TABLE archetype; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.archetype TO anon;
GRANT ALL ON TABLE public.archetype TO authenticated;
GRANT ALL ON TABLE public.archetype TO service_role;
GRANT ALL ON TABLE public.archetype TO github;


--
-- Name: SEQUENCE archetype_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.archetype_id_seq TO anon;
GRANT ALL ON SEQUENCE public.archetype_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.archetype_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.archetype_id_seq TO github;


--
-- Name: TABLE background; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.background TO anon;
GRANT ALL ON TABLE public.background TO authenticated;
GRANT ALL ON TABLE public.background TO service_role;
GRANT ALL ON TABLE public.background TO github;


--
-- Name: SEQUENCE background_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.background_id_seq TO anon;
GRANT ALL ON SEQUENCE public.background_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.background_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.background_id_seq TO github;


--
-- Name: TABLE campaign; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.campaign TO anon;
GRANT ALL ON TABLE public.campaign TO authenticated;
GRANT ALL ON TABLE public.campaign TO service_role;
GRANT ALL ON TABLE public.campaign TO github;


--
-- Name: SEQUENCE campaign_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.campaign_id_seq TO anon;
GRANT ALL ON SEQUENCE public.campaign_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.campaign_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.campaign_id_seq TO github;


--
-- Name: TABLE "character"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public."character" TO anon;
GRANT ALL ON TABLE public."character" TO authenticated;
GRANT ALL ON TABLE public."character" TO service_role;
GRANT ALL ON TABLE public."character" TO github;


--
-- Name: SEQUENCE character_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.character_id_seq TO anon;
GRANT ALL ON SEQUENCE public.character_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.character_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.character_id_seq TO github;


--
-- Name: TABLE class; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.class TO anon;
GRANT ALL ON TABLE public.class TO authenticated;
GRANT ALL ON TABLE public.class TO service_role;
GRANT ALL ON TABLE public.class TO github;


--
-- Name: SEQUENCE class_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.class_id_seq TO anon;
GRANT ALL ON SEQUENCE public.class_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.class_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.class_id_seq TO github;


--
-- Name: TABLE content_source; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.content_source TO anon;
GRANT ALL ON TABLE public.content_source TO authenticated;
GRANT ALL ON TABLE public.content_source TO service_role;
GRANT ALL ON TABLE public.content_source TO github;


--
-- Name: SEQUENCE content_source_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.content_source_id_seq TO anon;
GRANT ALL ON SEQUENCE public.content_source_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.content_source_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.content_source_id_seq TO github;


--
-- Name: TABLE content_update; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.content_update TO anon;
GRANT ALL ON TABLE public.content_update TO authenticated;
GRANT ALL ON TABLE public.content_update TO service_role;
GRANT ALL ON TABLE public.content_update TO github;


--
-- Name: SEQUENCE content_update_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.content_update_id_seq TO anon;
GRANT ALL ON SEQUENCE public.content_update_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.content_update_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.content_update_id_seq TO github;


--
-- Name: TABLE creature; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.creature TO anon;
GRANT ALL ON TABLE public.creature TO authenticated;
GRANT ALL ON TABLE public.creature TO service_role;
GRANT ALL ON TABLE public.creature TO github;


--
-- Name: SEQUENCE creature_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.creature_id_seq TO anon;
GRANT ALL ON SEQUENCE public.creature_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.creature_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.creature_id_seq TO github;


--
-- Name: TABLE encounter; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.encounter TO anon;
GRANT ALL ON TABLE public.encounter TO authenticated;
GRANT ALL ON TABLE public.encounter TO service_role;
GRANT ALL ON TABLE public.encounter TO github;


--
-- Name: SEQUENCE encounter_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.encounter_id_seq TO anon;
GRANT ALL ON SEQUENCE public.encounter_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.encounter_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.encounter_id_seq TO github;


--
-- Name: TABLE item; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.item TO anon;
GRANT ALL ON TABLE public.item TO authenticated;
GRANT ALL ON TABLE public.item TO service_role;
GRANT ALL ON TABLE public.item TO github;


--
-- Name: SEQUENCE item_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.item_id_seq TO anon;
GRANT ALL ON SEQUENCE public.item_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.item_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.item_id_seq TO github;


--
-- Name: TABLE language; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.language TO anon;
GRANT ALL ON TABLE public.language TO authenticated;
GRANT ALL ON TABLE public.language TO service_role;
GRANT ALL ON TABLE public.language TO github;


--
-- Name: SEQUENCE language_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.language_id_seq TO anon;
GRANT ALL ON SEQUENCE public.language_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.language_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.language_id_seq TO github;


--
-- Name: TABLE public_user; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.public_user TO anon;
GRANT ALL ON TABLE public.public_user TO authenticated;
GRANT ALL ON TABLE public.public_user TO service_role;
GRANT ALL ON TABLE public.public_user TO github;


--
-- Name: SEQUENCE public_user_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.public_user_id_seq TO anon;
GRANT ALL ON SEQUENCE public.public_user_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.public_user_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.public_user_id_seq TO github;


--
-- Name: TABLE spell; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.spell TO anon;
GRANT ALL ON TABLE public.spell TO authenticated;
GRANT ALL ON TABLE public.spell TO service_role;
GRANT ALL ON TABLE public.spell TO github;


--
-- Name: SEQUENCE spell_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.spell_id_seq TO anon;
GRANT ALL ON SEQUENCE public.spell_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.spell_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.spell_id_seq TO github;


--
-- Name: TABLE trait; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.trait TO anon;
GRANT ALL ON TABLE public.trait TO authenticated;
GRANT ALL ON TABLE public.trait TO service_role;
GRANT ALL ON TABLE public.trait TO github;


--
-- Name: SEQUENCE trait_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.trait_id_seq TO anon;
GRANT ALL ON SEQUENCE public.trait_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.trait_id_seq TO service_role;
GRANT SELECT,USAGE ON SEQUENCE public.trait_id_seq TO github;


--
-- Name: TABLE versatile_heritage; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.versatile_heritage TO anon;
GRANT ALL ON TABLE public.versatile_heritage TO authenticated;
GRANT ALL ON TABLE public.versatile_heritage TO service_role;


--
-- Name: SEQUENCE versatile_heritage_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.versatile_heritage_id_seq TO anon;
GRANT ALL ON SEQUENCE public.versatile_heritage_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.versatile_heritage_id_seq TO service_role;


--
-- PostgreSQL database dump complete
--

